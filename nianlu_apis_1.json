{
	"info": {
		"_postman_id": "61f3c58b-5511-4fa1-b95b-bacc25f5e45e",
		"name": "sample nlu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 delete all data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.clear()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.clear()",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Tesing response value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(\"Data cleared!!\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/delete-all-data",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"delete-all-data"
					]
				}
			},
			"response": []
		},
		{
			"name": "1 create default organization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"superadmin_id\", jsonData.user);",
							"pm.globals.set(\"superadmin_org\", jsonData.organization);",
							"",
							" pm.test(\"Status code is 200\", function (){",
							"    pm.response.to.have.status(200);",
							" });",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"postman.setNextRequest(\"2.1 Superadmin Login ( Get Token)\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"jagan@gmail.com\",\n    \"password\": \"jagan\",\n    \"first_name\": \"jagan\",\n    \"last_name\": \"kolla\",\n    \"selected_domains\": [\n        \"banking\",\n        \"ecommerce\"\n    ],\n    \"selected_languages\": [\n        \"en\",\n        \"te\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/create-default-organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"create-default-organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.1 Superadmin Login ( Get Token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"superadmin_token\", jsonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"jagan@gmail.com\",\n    \"password\": \"jagan\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/user/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.2 create predefined smalltalk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							" pm.test(\"Status code is 200\", function (){",
							"    pm.response.to.have.status(200);",
							" });",
							"",
							"pm.test(\"Response time is less than 40000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(40000);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{superadmin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/v1.0/{{superadmin_org}}/{{superadmin_id}}/create-predefined-smalltalk",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"v1.0",
						"{{superadmin_org}}",
						"{{superadmin_id}}",
						"create-predefined-smalltalk"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.1  create organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.globals.set(\"client_org\", jsonData.id);",
							"pm.globals.set(\"rolemanager_id\", jsonData[\"role manager\"]);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{superadmin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"org_name\": \"kotak\",\n    \"org_type\": \"Enterprise\",\n    \"no_of_skills\": 10,\n    \"no_of_users\": 10,\n    \"deployment_type\": \"oncloud\",\n    \"selected_domains\": [\n        \"banking\",\n        \"ecommerce\"\n    ],\n    \"selected_languages\": [\n        \"en\",\n        \"te\"\n    ],\n    \"first_name\": \"sunil\",\n    \"last_name\": \"k\",\n    \"email\": \"sunil@gmail.com\",\n    \"password\": \"sunil\",\n    \"confirm_password\": \"sunil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{superadmin_org}}/{{superadmin_id}}/organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{superadmin_org}}",
						"{{superadmin_id}}",
						"organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.3 Rolemanager Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"rolemanager_token\", jsonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sunil@gmail.com\",\n    \"password\": \"sunil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/user/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.1 User creation for the organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"admin_id\", jsonData.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{rolemanager_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"srinivas@gmail.com\",\n    \"password\": \"srinivas\",\n    \"roles\": [\n        \"admin\"\n    ],\n    \"is_admin\": \"True\",\n    \"first_name\": \"srini\",\n    \"last_name\": \"sisla\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{rolemanager_id}}/user",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{rolemanager_id}}",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.5 Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"admin_token\", jsonData.token);",
							"pm.globals.set(\"admin_id\", jsonData.user_details.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"//postman.setNextRequest(\"2.1 Superadmin Login ( Get Token)\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"srinivas@gmail.com\",\n    \"password\": \"srinivas\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/user/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.2 Get Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.2 developer creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"developer_id\", jsonData.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{rolemanager_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"raju@gmail.com\",\n    \"password\": \"raraju\",\n    \"roles\": [\n        \"developer\"\n    ],\n    \"is_admin\": \"True\",\n    \"first_name\": \"raju\",\n    \"last_name\": \"santi\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{rolemanager_id}}/user",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{rolemanager_id}}",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.6 developer login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"developer_token\", jsonData.token);",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{developer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"raju@gmail.com\",\n    \"password\": \"raraju\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/user/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.3  Update Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"org_name\": \"nianlu_update\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.1 craete skill",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"skill_id\", jsonData.id);",
							"pm.globals.set(\"paren_faq_folder_id\", jsonData.faq_tree.en.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"flipcarts\",\n    \"description\": \"\",\n    \"Interaction Type\": \"chat\",\n    \"domains\": [\n        \"ecommerce\"\n    ],\n    \"languages\": [\n        \"en\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/create-skill",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"create-skill"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.2 Get Skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/skill-operations/{{skill_id}}/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"skill-operations",
						"{{skill_id}}",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.3 update skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"name\": \"Amazon & AWS\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/skill-operations/{{skill_id}}/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"skill-operations",
						"{{skill_id}}",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.1 FAQ tree create ( give child node name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.globals.set(\"child_faq_folder_id\",jsonData.id)",
							"",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"folder_name\": \"section-5\",\n\t\"parent\": \"{{paren_faq_folder_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faq-tree/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faq-tree",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.2 Get the FAQ Tree",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/get-faq-tree/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"get-faq-tree",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.3 Update FAQ tree",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"id\" : \"{{child_faq_folder_id}}\",\n    \"folder_name\": \"samsung phones\",\n    \"faq_settings\": null,\n    \"faq_synonyms\": {\n        \"local\": {},\n        \"global\": {}\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faq-tree/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faq-tree",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "7.1 Create QuestionAnswer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"",
							"pm.globals.set(\"qa_id\",jsonData.id);",
							"",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"questions\": [\"who is the branch manager\", \"what is the name of branch manager\"],\n    \"answer\": \"This is from bank folder .\",\n    \"folder\": \"{{child_faq_folder_id}}\",\n    \"primary_question\": \"who is the branch manager\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faqs/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faqs",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "7.2 Get QuestionAnswer ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faqs/en?folder_id={{child_faq_folder_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faqs",
						"en"
					],
					"query": [
						{
							"key": "folder_id",
							"value": "{{child_faq_folder_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7.3 Update questionAnswer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"folder_id\": \"{{child_faq_folder_id}}\",\n    \"qa_id\": \"{{qa_id}}\",\n    \"question\": {\n                \"0\": \"who is the branch manager, can you tell me?\",\n                \"1\": \"what is the name of branch manager tell me?\"\n            },\n    \"answer\": \"this is from bank folder\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faqs/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faqs",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "8.0 get default small talk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.globals.set(\"default_smalltalk_data\",jsonData.smalltalk);",
							"",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/get-predefined-smalltalk/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"get-predefined-smalltalk",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "8.0.1  add default smalltalk to skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 50000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data_type\": \"smalltalk\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/predefined-smalltalk/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"predefined-smalltalk",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "8.1 get small talk if not create small talk and return to it.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/smalltalk/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"smalltalk",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.1 create Intent",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"intent_name\": \"applyHouseLoan\",\n    \"intent_description\": \"Here is the description for the apply house loan intent\",\n    \"utterances\": [\n        {\n            \"utterance\": \"please apply house loan for 70 lakhs\",\n            \"entities\": [\n                {\n                    \"start\": 39,\n                    \"end\": 43,\n                    \"value\": \"70 lakhs\",\n                    \"entity\": \"loan_amount\"\n                }\n            ]\n        },\n        {\n            \"utterance\": \"please apply home loan in 30 lakhs\",\n            \"entities\": [\n                {\n                    \"start\": 39,\n                    \"end\": 43,\n                    \"value\": \"30 lakhs\",\n                    \"entity\": \"money\"\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/intents/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"intents",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.2 Get Intent ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"intent_id\", jsonData[\"data\"][0][\"id\"]);",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/intents/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"intents",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.3 update Intent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// for same intent name update, please change the response ",
							"//\"error\": \"Intent name must be unique across a skill\""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"intent_id\" : \"{{intent_id}}\" ,\n    \"intent_name\" : \"House Loan 1\",\n    \"intent_description\": \"Here is the description\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/intents/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"intents",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.5 Create Utterance (s)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"utterances\": [\n        {\n            \"utterance\": \"lakhs\",\n            \"entities\": [\n                {\n                    \"start\": 39,\n                    \"end\": 43,\n                    \"value\": \"80 lakhs\",\n                    \"entity\": \"loan_amount\"\n                }\n            ]\n        },\n        {\n            \"utterance\": \"lakhs\",\n            \"entities\": [\n                {\n                    \"start\": 39,\n                    \"end\": 43,\n                    \"value\": \"30 lakhs\",\n                    \"entity\": \"loan_amount\"\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/{{intent_id}}/utterances/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"{{intent_id}}",
						"utterances",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.6 Get Utterances",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"utterance_id\", jsonData.utterances[0].id);",
							"",
							"",
							"",
							"pm.globals.set(\"variable_key\", \"variable_value\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/{{intent_id}}/utterances/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"{{intent_id}}",
						"utterances",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.7 Update Utterances",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": [\n        {\n            \"id\": \"{{utterance_id}}\",\n            \"utterance\": \"please apply house loan for 70 lakhs_update_update\",\n            \"entities_data\": [\n                {\n                    \"end\": 43,\n                    \"start\": 39,\n                    \"value\": \"70 lakhs\",\n                    \"entity\": \"loan_amount_update\"\n                }\n            ]\n        }\n        \n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/{{intent_id}}/utterances/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"{{intent_id}}",
						"utterances",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "10.1 Create Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"entity_name\": \"reason\",\n    \"is_tagged\": true,\n    \"entity_category\": \"regex\",\n    \"entity_value\":\"[a-z]\",\n    \"entity_type\": \"BT.NONE\",\n    \"associated_intents\": [\n        \"{{intent_id}}\"\n    ],\n    \"utterances\": [\n        {\n            \"utterance\": \"I will make deposit for 70 lakhs\",\n            \"entities\": [\n                {\n                    \"start\": 39,\n                    \"end\": 43,\n                    \"value\": \"70 lakhs\",\n                    \"entity\": \"deposit\"\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/entities/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"entities",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "10.2 Get Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"entity_id\", jsonData[\"data\"][0][\"id\"]);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/entities/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"entities",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "10.3 Update Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": [\n        {\n            \"id\": \"{{entity_id}}\",\n            \"entity_name\": \"out_side_loan_amount\",\n            \"is_tagged\": false,\n            \"category\": null,\n            \"entity_value\": null,\n            \"entity_type\": \"custom\",\n            \"associated_intents\": [],\n            \"utterances\": [\n                {\n                    \"id\": \"{{utterance_id}}\",\n                    \"utterance\": \"please apply house loan for 70 lakhs\",\n                    \"entities_data\": [\n                        {\n                            \"end\": 43,\n                            \"start\": 39,\n                            \"value\": \"70 lakhs\",\n                            \"entity\": \"loan_amount\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/entities/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"entities",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "11.1 Skill Build",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response time is less than 100000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"build_option\": \"smalltalk\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/textanalysis/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/build-ai/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"textanalysis",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"build-ai",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. 2 Skill Inference",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"tell me a joke\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/textanalysis/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/predict-message/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"textanalysis",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"predict-message",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "12.1 Deploye Skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"deployment_notes\": \"acl2 and deployment2 testing....\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/deploy-skill",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"deploy-skill"
					]
				}
			},
			"response": []
		},
		{
			"name": "12.2 Approve Skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"deployment_notes\": \"all perfect\",\n\"deployed_skill_id\": \"{{skill_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/approve-skill",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"approve-skill"
					]
				}
			},
			"response": []
		},
		{
			"name": "12.1.1 Deploy skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 429\", function () {",
							"    pm.response.to.have.status(429);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"deployment_notes\": \"acl2 and deployment2 testing....\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/deploy-skill",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"deploy-skill"
					]
				}
			},
			"response": []
		},
		{
			"name": "12.3 Decline Skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"deployment_notes\": \"not all perfect\",\n    \"deployed_skill_id\": \"005ecb4e-349e-423c-a905-72089bdb171c\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/decline-skill",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"decline-skill"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. 4 Delete Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"entity_id\" : \"{{entity_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/entities/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"entities",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.8 Delete Utterances",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"utterance_ids\": [\n        \"{{utterance_id}}\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/{{intent_id}}/utterances/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"{{intent_id}}",
						"utterances",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "9.4 Delete intent ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"intent_id\" : \"{{intent_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/intents/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"intents",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "7.4 delete QuestionAnswer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faqs/en?id={{qa_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faqs",
						"en"
					],
					"query": [
						{
							"key": "id",
							"value": "{{qa_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6.4 Delete FAQ tree",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/{{skill_id}}/faq-tree/en?id={{child_faq_folder_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"{{skill_id}}",
						"faq-tree",
						"en"
					],
					"query": [
						{
							"key": "id",
							"value": "{{child_faq_folder_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5.4 Delete skill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{admin_id}}/skill-operations/{{skill_id}}/en",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{admin_id}}",
						"skill-operations",
						"{{skill_id}}",
						"en"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.4 Organization Deletion ***logging not working flow need***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"pm.test(\"Tesing response value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Organization deleted successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{superadmin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/nianlu/dashboard/api/{{version}}/{{client_org}}/{{superadmin_id}}/organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"nianlu",
						"dashboard",
						"api",
						"{{version}}",
						"{{client_org}}",
						"{{superadmin_id}}",
						"organization"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://nb1.botjet.ai"
		},
		{
			"key": "version",
			"value": "v1.0"
		}
	]
}